<?php

/*
* Node rating module for Drupal 5
* Copyright (c) 2006, Alf Eaton and Nature Publishing Group
* Released under the GPL license
* http://www.gnu.org/copyleft/gpl.html
*/

if (module_exists('views')) {
  include_once('jrating_views.inc');
}

/**
* hook_perm().
*/
function jrating_perm() {
  return array ('rate content');
}

/**
* hook_menu().
*/
function jrating_menu($may_cache) {
  $items = array();
  
  if ($may_cache){
    $items[] = array(
      'path' => 'admin/settings/jrating',
      'title' => t('jRating'),
      'description' => t('Administer jRating.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => 'jrating_settings',
      'access' => user_access('administer site configuration'),
      );
  }
  else{
    drupal_add_js('function rating_postsubmit(nid){' . theme('jrating_postsubmit') . '}', 'inline');
  }
  
  return $items;
}

/**
* Configuration form.
*/
function jrating_settings() {
  $form['jrating_display_anonymous'] = array(
    '#type' => 'radios',
    '#title' => t('Display rating form for anonymous users'),
    '#default_value' => variable_get('jrating_display_anonymous', 1),
    '#options' => array ('1' => t('Yes'), '0' => t('No')),
    '#description' => t('Should a rating form be present when users aren\'t logged in?')
    );
  
  $form['jrating_display_form_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Display rating form for teasers'),
    '#default_value' => variable_get('jrating_display_form_teaser', 0),
    '#options' => array ('1' => t('Yes'), '0' => t('No')),
    '#description' => t('Should a rating form be present when only a node teaser is displayed?')
    );
  
  $form['jrating_display_mean'] = array(
    '#type' => 'radios',
    '#title' => t('Display average rating'),
    '#default_value' => variable_get('jrating_display_mean', 1),
    '#options' => array ('1' => t('Yes'), '0' => t('No')),
    '#description' => t('Should the average rating for an item be displayed?')
    );
  
  $form['jrating_display_mean_teaser'] = array(
    '#type' => 'radios',
    '#title' => t('Display average rating for teasers'),
    '#default_value' => variable_get('jrating_display_mean_teaser', 0),
    '#options' => array ('1' => t('Yes'), '0' => t('No')),
    '#description' => t('Should the average rating for an item be present when only a node teaser is displayed?'),
    '#disabled' => (! variable_get('jrating_display_mean', 1))
    );
  
  $form['jrating_form_weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight of the rating form'),
    '#default_value' => variable_get('jrating_form_weight', 10),
    '#delta' => 10,
    '#description' => t('Where should the rating form be positioned (heavier = lower)?')
    );
  
  return system_settings_form($form);
}

/**
* hook_form alter().
*/
function jrating_form_alter($form_id, &$form) {
  if ($form_id == 'node_type_form') {
    $form['workflow']['jrating_nodeapi'] = array(
      '#type' => 'radios',
      '#title' => t('Show a rating control'),
      '#default_value' => variable_get('jrating_nodeapi_' . $form['old_type']['#value'], 0),
      '#options' => array (
        1 => t('Yes: display a rating control with nodes of this type'),
        0 => t('No: do not display a rating control with nodes of this type')
        )
      );
  }
}

/**
* hook_nodeapi()
*/
function jrating_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
  case 'load':
    if ($node->nid && variable_get('jrating_nodeapi_' . $node->type, 0)) // FIXME: memcached
      $node->jrating_mean_rating = jrating_get_mean_rating($node->nid);
    break;
    
  case 'view':
    if ($node->nid && (!$teaser || variable_get('jrating_display_mean_teaser', 0) || variable_get('jrating_display_form_teaser', 0)) && variable_get('jrating_nodeapi_' . $node->type, 0)) {
      drupal_add_css(drupal_get_path('module', 'jrating') . '/jrating.css');
      drupal_add_js(drupal_get_path('module', 'jrating') . '/js/form.js');
      drupal_add_js(drupal_get_path('module', 'jrating') . '/js/rating.js');
      
      $node->jrating_html = jrating_display_rating_form($node, $teaser); // needed for CCK nodes
      $node->content['jrating_html'] = array(
        '#value' => $node->jrating_html,
        '#weight' => variable_get('jrating_form_weight', 10)
        );
    }
    break;
  }
}

function jrating_display_rating_form($node, $teaser){
  global $user;
  if ((!$teaser || variable_get('jrating_display_form_teaser', 0)) && (user_access('rate content') || ((!$user->uid) && variable_get('jrating_display_anonymous', 1)))){
    $rating_form = drupal_get_form('rating_form_' . $node->nid, array('nid' => $node->nid));
  }
  
  if (variable_get('jrating_display_mean', 1) && (!$teaser || variable_get('jrating_display_mean_teaser', 0))){
  	$mean_rating = theme('jrating_average_rating', $node);
  }
  
  $rating_intro = '<div class="rating-intro" id="rating-intro-' . $node->nid . '"></div>';
  
  return theme('jrating_rating_item', $rating_intro, $mean_rating, $rating_form);
}

function theme_jrating_rating_item($rating_intro = NULL, $mean_rating = NULL, $rating_form = NULL){
  return '<div class="rating-item">' . $mean_rating . '<div class="rating">' . $rating_intro . $rating_form . '</div></div>';
}

/**
* hook_forms()
*/
function jrating_forms($args) {
    $form_id = $args[0];
    $forms = array();
    if (preg_match('/^rating_form_\d+$/', $form_id)){
      $forms[$form_id] = array(
        'callback' => 'jrating_rate',
        );
    }
    return $forms;
}

/**
* Build rating form
*/
function jrating_rate($args) {
  $nid = $args['nid'];
  
  $form = array();
  
  $form['#base'] = 'jrating_rate';
  $form['#action'] = url("node/$nid");
  
  $form['#attributes'] = array ('class' => 'rating');
  
  $user_rating = jrating_get_user_rating($nid);
  $form['#attributes']['title'] = 'Rating: ' . $user_rating['rating'];
  
  $rating_options = array(
    '0' => t('---'),
    '100' => t('Excellent!'),
    '80' => t('Great!'),
    '60' => t('Good'),
    '40' => t('Quite good'),
    '20' => t('Not so great')
    );
  
  $form['rating'] = array(
    '#id' => 'rating-options-' . $nid,
    '#type' => 'select',
    '#default_value' => round($user_rating['percent'] / 20) * 20,
    '#options' => $rating_options,
    '#title' => t('Rate this'),
    '#attributes' => array('class' => 'rating-options', 'title' => t('Rate this'))
    );
  
  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $nid
    );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
    );
  return $form;
}

/**
* Submit rating form
*/
function jrating_rate_submit($form_id, $form_values) {
  global $user;
  $vote = new stdClass;
  
  if ($user->uid && user_access('rate content')) {
    $vote->value = max(0, min(100, $form_values['rating']));
    $vote->value_type = 'percent';
    $vote->tag = 'vote';
    
    $vote->value ? votingapi_set_vote('node', $form_values['nid'], $vote) : votingapi_unset_vote('node', $form_values['nid']);
    
    $node = node_load(array('nid' => $form_values['nid']));
    
    $response = array(
      'mean' => $node->jrating_mean_rating['rating'],
      'num_votes' => $node->jrating_mean_rating['num_votes'],
      'response' => t('Rating saved')
      );
    
    db_query("REPLACE INTO {history} (uid, nid, timestamp) VALUES (%d, %d, %d)", $user->uid, $form_values['nid'], time());
  }
  else {
    $error = t('You need to !login to rate items', array('!login' => l(t('login or register'), 'user/login', NULL, 'destination=' . $_GET['q'])));
    $response = array('error' => $error);
  }
  
  if ($_SERVER["HTTP_X_REQUESTED_WITH"] == 'XMLHttpRequest') {
    print drupal_to_js($response);
    exit();
  }
  else {
    drupal_set_message($error);
  }
}

/**
* Get user rating for a node.
*/
function jrating_get_user_rating($nid, $uid = FALSE) {
  global $user;
  if (!$uid)
    $uid = $user->uid;
  
    if ($votes = votingapi_get_user_votes('node', $nid, $uid)) {
      foreach ($votes as $vote) {
        if ($vote->value_type == 'percent' && $vote->tag == 'vote') {
          $rating = $vote;
          break;
        }
      }
    }
    
    $result = array(
      'rating' => $rating ? sprintf("%.1f", round($rating->value / 20,1)) : '0.0',
      'percent' => $rating ? $rating->value : '0',
      );
    
    return $result;
}

/**
* Get the mean rating for a node.
*/
function jrating_get_mean_rating($nid) {
  if ($rating = votingapi_get_voting_result('node', $nid, 'percent', 'vote', 'average')) {
    $count = votingapi_get_voting_result('node', $nid, 'percent', 'vote', 'count');
    $num_votes = $count->value;
  }
  
  $result = array(
    'rating' => $rating ? sprintf("%.1f", round($rating->value / 20, 1)) : '0.0',
    'percent' => $rating ? $rating->value : '0',
    'num_votes' => $rating ? $num_votes : '0'
    );
  
  return $result;
}

/**
* Theme function to produce rating stars for average ratings.
*/
function theme_jrating_average_rating($node, $vote = FALSE) {
  if ($vote){
    $rating['rating'] = sprintf("%.1f", round($vote->value / 20, 1));
    $rating['num_votes'] = 0; // FIXME
  }
  else{
    $node = node_load(array('nid' => $node->nid));
  	$rating = $node->jrating_mean_rating;
  }
  
  $mean_rating = $rating['rating'];
  
  $stars = array();
  $count = 0;
  while ($mean_rating >= 1){
  	$stars[] = '<div class="star avg on"><a style="width: 100%;" onclick="return false;">&nbsp;</a></div>';
    $mean_rating--;
    $count++;
  }
  if ($mean_rating == 0.5){
    $stars[] = '<div class="star avg on"><a style="width: 50%;" onclick="return false;">&nbsp;</a></div>';
    $count++;
  }
  while ($count < 5){
    $stars[] = '<div class="star avg"><a style="width: 100%;" onclick="return false;">&nbsp;</a></div>';
    $count++;
  }
  
  
  if ($vote){
  	drupal_add_css(drupal_get_path('module', 'jrating') . '/jrating.css');
  	return '<span class="rating" id="rating-mean-' . $node->nid . '">' . implode("\n", $stars) . '</span>';
  }
  
  $num_votes_span = '<span id="rating-num-votes-' . $node->nid .'">';
  $num_votes_html = $num_votes_span . format_plural($rating['num_votes'], '1</span> vote', '@count</span> votes');
  
  return '<div class="rating" id="rating-mean-' . $node->nid . '"><div class="rating-intro"><span class="rating-intro-text">' . t('Average rating') . '</span></div><div class="rating-stars" id="rating-mean-stars-' . $node->nid . '">' . implode("\n", $stars) . '</div><div class="num-votes">(' . $num_votes_html . ')</div></div>';
}

/**
* Called by votingapi_views to format vote results.
*/
function jrating_votingapi_format($vote, $op){
	if ($op == 'value' && $vote->tag == 'vote' && $vote->value_type == 'percent' && $vote->function == 'average'){
	  $node = node_load($vote->content_id);
		return theme('jrating_average_rating', $node, $vote);
	}
}

/**
* Javascript function called after rating is submitted
*/
function theme_jrating_postsubmit(){
  return 'return true;';
}

function jrating_footer($main = 0){
	return '<noscript><style type="text/css">form.rating{ display: block; }</style></noscript>';
}

?>
